Starting from version 0.5 Avalanche supports ARM/Linux as runtime environment.
This README file describes the steps to build and run Avalanche on ARM.

1. BUILDING AVALANCHE FOR ARM

- Checkout the latest version of Avalanche source from "samsung" branch:

  $ svn checkout http://avalanche.googlecode.com/svn/branches/samsung avalanche

- Make sure you have ARM cross-compiler build environment available. Avalanche
  build was tested with Scratchbox 2 (https://maemo.gitorious.org/scratchbox2)
  and CodeSourcery GCC ARM cross compiler (http://www.codesourcery.com/sgpp/lite_edition.html)
  Then follow the usual build Avalanche build steps (described in README):

  $ cd avalanche
  $ ./autogen.sh
  $ sb2 ./configure --prefix=<DIST-DIR>
  $ sb2 make
  $ sb2 make install

- Copy contents of <DIST-DIR> to ARM device or QEmu file system image (or make
  it available from ARM/Linux environment otherwise, e.g. through NFS mounted
  directory).

2. BUILDING DEBIAN PACKAGE

- Make sure you have Debian packaging tools available.

- Use debian/rules script to build and create .deb package:

  $ cd avalanche
  $ ./autogen.sh
  $ debian/rules build
  $ sudo debian/rules binary

- Find the avalanche_VERSION_ARCH.deb file in the parent directory (where
  VERSION is avalanche version number, e.g. 0.5.0, and ARCH is the target
  architecture - e.g. i386 or armel):

  $ ls ../avalanche_*.deb
  ../avalanche_0.5.0_i386.deb

3. RUNNING AVALANCHE FOR ARM/LINUX IN "SPLIT" MODE

To take advantage of faster "host" (x86/Linux) hardware, Avalanche can be run
in split mode where only Valgrind plugin components (tracegrind, covgrind) are
being executed in the "target" (ARM/Linux) environment, and other components
(STP solver and the driver module) on the host machine.

- You will need both x86/Linux and ARM/Linux avalanche packages available to
  use the "split" mode. For example: you can run two builds for different
  target architectures from the same source tree:

  $ cd avalanche
  $ ./autogen.sh

  [ building for x86: ]
  $ ./configure --prefix=$PWD/dist-x86
  $ make
  $ make install

  [ building for arm with Scratchbox: ]
  $ make distclean
  $ sb2 ./configure --prefix=$PWD/dist-arm
  $ sb2 make
  $ sb2 make install

  There are two different ways to run Avalanche in split-mode.

  1) Server is on host device:
- Start avalanche with ARM executable on host device with ...

  [ on host x86/Linux device: ]
  $ cd avalanche/samples/simple2
  $ file sample2
  sample2: ELF 32-bit LSB executable, ARM, ...
  $ ../../dist-x86/bin/avalanche --filename=seed --remote-valgrind=client --remote-port=5555 $PWD/sample2 seed

- Start the Avalanche plugin agent on target device:

  [ on the target ARM/Linux device: ]
  $ cd avalanche/dist-arm
  $ bin/plugin-agent --port=5555 --host=<host ip>

  2) Server is on target device:

- Start the Avalanche plugin agent on target device:

  [ on the target ARM/Linux device: ]
  $ cd avalanche/dist-arm
  $ bin/plugin-agent --port=5555

- Start avalanche with ARM executable on host device with ...

  [ on host x86/Linux device: ]
  $ cd avalanche/samples/simple2
  $ file sample2
  sample2: ELF 32-bit LSB executable, ARM, ...
  $ ../../dist-x86/bin/avalanche --filename=seed --remote-valgrind=host --remote-host=192.168.129.3 --remote-port=5555 $PWD/sample2 seed

Please note that the limitation of this version of plugin agent is that you
have to use full path to executable of analyzed program ("$PWD/sample2" in the
above example).
